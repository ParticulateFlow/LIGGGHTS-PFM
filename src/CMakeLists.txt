PROJECT(LIGGGHTS C CXX)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
OPTION(USE_SUPERQUADRIC "Superquadric particles" OFF)
OPTION(USE_OPENMP "OpenMP parallelization" OFF)
OPTION(TESTING "TESTING" OFF)

SET(LIGGGHTS_MAJOR_VERSION 21)
SET(LIGGGHTS_MINOR_VERSION 03)
SET(LIGGGHTS_PATCH_VERSION 0)
SET(LIGGGHTS_VERSION ${LIGGGHTS_MAJOR_VERSION}.${LIGGGHTS_MINOR_VERSION}.${LIGGGHTS_PATCH_VERSION})
MESSAGE(STATUS "${LIGGGHTS_VERSION}")

IF (NOT CMAKE_CXX_FLAGS)
  IF(CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_CXX_FLAGS "-O2 -funroll-loops -fstrict-aliasing -Wall -Wextra -Wno-unused-result -Wno-unused-parameter -Wno-literal-suffix -Wno-cast-function-type -std=c++11")
  ENDIF()
ENDIF()

FILE(GLOB SOURCES *.cpp)
LIST(REMOVE_ITEM SOURCES main.cpp)

IF(WIN32)
  INCLUDE_DIRECTORIES(WINDOWS/extra)
  ADD_DEFINITIONS(-D_USE_MATH_DEFINES -DNOMINMAX)

  IF(MSVC)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj")
  ENDIF()

  FIND_PACKAGE(Cygwin REQUIRED)

  ADD_CUSTOM_TARGET(GenerateHeaders
           COMMAND GenerateHeaders.bat ${CYGWIN_INSTALL_PATH}
           WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/WINDOWS)
ELSE()
  ADD_CUSTOM_TARGET(GenerateHeaders
           COMMAND sh Make.sh style
           COMMAND sh Make.sh models
           WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
ENDIF()

ADD_LIBRARY(liggghts SHARED ${SOURCES})
ADD_DEPENDENCIES(liggghts GenerateHeaders)

ADD_EXECUTABLE(liggghts_bin main.cpp)
TARGET_LINK_LIBRARIES(liggghts_bin liggghts)
SET_TARGET_PROPERTIES(liggghts_bin PROPERTIES OUTPUT_NAME liggghts)

#=======================================

FIND_PACKAGE(VTK NO_MODULE)

IF(VTK_FOUND)
  INCLUDE(${VTK_USE_FILE})
  ADD_DEFINITIONS(-DLAMMPS_VTK)
  TARGET_LINK_LIBRARIES(liggghts ${VTK_LIBRARIES})
  MESSAGE(STATUS "Found VTK")
ELSE(VTK_FOUND)
  MESSAGE(STATUS "VTK NOT found!")
ENDIF(VTK_FOUND)

#=======================================

FIND_PACKAGE(JPEG)

IF(JPEG_FOUND)
  INCLUDE_DIRECTORIES(${JPEG_INCLUDE_DIR})
  ADD_DEFINITIONS(-DLAMMPS_JPEG)
  TARGET_LINK_LIBRARIES(liggghts jpeg)
ELSE(JPEG_FOUND)
  MESSAGE(STATUS "JPEG NOT found!")
ENDIF(JPEG_FOUND)

#=======================================

FIND_PACKAGE(MPI)

IF(MPI_FOUND)
  INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
  TARGET_LINK_LIBRARIES(liggghts ${MPI_LIBRARIES})

  IF(MPI_COMPILE_FLAGS)
    SET_TARGET_PROPERTIES(liggghts PROPERTIES COMPILE_FLAGS "${MPI_COMPILE_FLAGS}")
  ENDIF()

  IF(MPI_LINK_FLAGS)
    SET_TARGET_PROPERTIES(liggghts PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")
  ENDIF()
ELSE(MPI_FOUND)
  MESSAGE(STATUS "MPI NOT found! Using MPI Stubs instead.")
  ADD_SUBDIRECTORY(STUBS)
  TARGET_LINK_LIBRARIES(liggghts mpi_stubs)
ENDIF(MPI_FOUND)

#=======================================

IF(USE_SUPERQUADRIC)
  ADD_DEFINITIONS(-DNONSPHERICAL_ACTIVE_FLAG -DSUPERQUADRIC_ACTIVE_FLAG)
  MESSAGE(STATUS "Enabled SUPERQUADRIC")
ENDIF()

#=======================================

IF(USE_OPENMP)
  FIND_PACKAGE(OpenMP REQUIRED)

  IF(OPENMP_FOUND)
    ADD_DEFINITIONS(-DLMP_USER_OMP)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")

    FIND_PACKAGE(Zoltan REQUIRED)

    IF(ZOLTAN_FOUND)
      INCLUDE_DIRECTORIES(${ZOLTAN_INCLUDE_DIR})
      ADD_DEFINITIONS(-DLMP_USER_ZOLTAN)
      TARGET_LINK_LIBRARIES(liggghts zoltan)
    ELSE()
      MESSAGE(SEND_ERROR "Zoltan library not found!")
    ENDIF()
  ENDIF()
ENDIF()

#=======================================

install(TARGETS liggghts liggghts_bin
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib)

IF(TESTING)
  enable_testing()
  include_directories(${CMAKE_CURRENT_SOURCE_DIR})
  add_subdirectory(tests)
ENDIF(TESTING)
